// Code generated by {{.GeneratorInfo.Name }}. DO NOT EDIT.
// {{ .GeneratorInfo.Name }} {{ .GeneratorInfo.Version }}

package {{ .PackageName }}

import (
	"context"
	"time"

	"github.com/prometheus/client_golang/prometheus"
)

// MetricsClient wraps a Client and will record metrics around request duration.
type MetricsClient struct {
    client Iface
    metric *prometheus.HistogramVec
}

// NewMetricsClient initializes a MetricsClient.
func NewMetricsClient(client Iface, metric *prometheus.HistogramVec) *MetricsClient {
    return &MetricsClient{
        client: client,
        metric: metric,
    }
}

{{ range .Handlers }}
{{ printf "%s %s" .ExportedName .Description | formatComment }}
func (c *MetricsClient) {{ .ExportedName }}({{ .TypeList}} ) {{ if .IsFileDownload }}(*http.Response,{{ else }}{{ if .ResponseType }}({{ .ResponseType }}, {{end}}{{end}}error{{ if .ResponseType }}){{end}} {
    start := time.Now()
    {{ if .ResponseType}}resp, {{ end }}err := c.client.{{ .ExportedName }}({{ .ValueList false }})
    c.metric.WithLabelValues("{{ snake .Name }}").Observe(time.Since(start).Seconds())
	return {{ if .ResponseType }}resp, {{ end }} err
}
{{ end }}
