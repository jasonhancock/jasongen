// Code generated by {{.GeneratorInfo.Name }}. DO NOT EDIT.
// {{ .GeneratorInfo.Name }} {{ .GeneratorInfo.Version }}

package {{ .PackageName }}

import (
	"context"
	"io"
	"encoding/json"
    "net/http"
    "net/url"

    "github.com/jasonhancock/go-backoff"
    "github.com/ns-jsattler/go-httpc"
	httpcerrors "github.com/ns-jsattler/go-httpc/errors"
)

var nonRetryStatuses = httpc.StatusNotIn(
    http.StatusUnauthorized,
    http.StatusForbidden,
    http.StatusUnprocessableEntity,
    http.StatusBadRequest,
)

type Client struct {
    client *httpc.Client
}

// New creates a new client that will communicate with the server over HTTP.
func New(host url.URL, client httpc.Doer, b backoff.Backoffer) *Client {
    return &Client{
        client: httpc.New(
            client,
            httpc.WithBaseURL(host.String()),
            httpc.WithBackoff(b),
            httpc.WithRetryResponseErrors(),
        ),
    }
}

{{ range .Handlers }}
// {{ .ExportedName }} {{ .Description }}
func (c *Client) {{ .ExportedName }}({{ .TypeList}} ) {{ if .ResponseType }}({{ .ResponseType }}, {{end}}error{{ if .ResponseType }}){{end}} {
{{- if .ErrorResponseTypes }}
	errorMap := map[int]error{
{{- range .ErrorResponseTypes }}
{{ httpstatus .Code }}: &{{ .Type }}{},
{{- end }}
	}

{{ end }}

{{- if .ResponseType }}
	var data {{ .ResponseType }}
{{- end }}
    err := c.client.{{ upper .Method }}({{ .ParameterizedURI }}).
{{- if .RequestBodyType }}
		ContentType("application/json").
		Body(req).
{{- end }}
{{- if .Params.HasQuery }}
        QueryParams(qp.get()...).
{{- end }}
        Success(httpc.StatusIn({{ .SuccessStatusCode }})).
        RetryStatus(nonRetryStatuses).
{{ if .ResponseType }}
        DecodeJSON(&data).
{{ if .SuccessContentType }}
		Header("Accept", {{ .SuccessContentType | quote }}).
{{ end }}
{{ end }}
{{- if .ErrorResponseTypes }}
		OnError(errorHandler(errorMap)).
{{- end }}
        Do(ctx)

{{- if .ErrorResponseTypes }}

	if cErr := errors.Unwrap(err); cErr != nil && cErr != httpcerrors.ErrUnexpectedResponse {
		err = cErr
	}

{{- end }}

	return {{ if .ResponseType }}data, {{ end }} err
}
{{ end }}

func errorHandler(errMap map[int]error) httpc.ErrorFn {
	return func(r io.Reader, status int) error {
		if data, ok := errMap[status]; ok {
			dec := json.NewDecoder(r)
			if err := dec.Decode(data); err != nil {
				// the server returned a response body we cannot read. Ensure we read the
				// entire response body so the httpc error handling can pick it up, then
				// return nil.
				_, _ = io.Copy(io.Discard, r)
				return nil
			}
			return data
		}

		// In order for the plumbing to work to capture the resp body in the httpc
		// error handling, we need to read the body.
		_, _ = io.Copy(io.Discard, r)
		// by returning nil here, we should fall through to the default handling and
		// send a ClientErr
		return nil
	}
}
