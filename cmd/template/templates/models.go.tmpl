// Code generated by {{.GeneratorInfo.Name }}. DO NOT EDIT.
// {{ .GeneratorInfo.Name }} {{ .GeneratorInfo.Version }}

package {{ .PackageName }}

{{ if .Models.HasEnumerated }}
    import "net/http"
{{ end }}
{{ if .Models.Imports }}
{{ if eq (len .Models.Imports) 1 }}
import {{ (index .Models.Imports 0).String }}
{{ else }}
import (
{{- range .Models.Imports }}
	"{{ .String }}"
{{- end }}
)
{{ end }}
{{ end }}
import "github.com/jasonhancock/jasongen/params"

{{ range $_, $m := .Models }}
{{ printf "%s %s" $m.Name $m.Description | formatComment }}
{{- if $m.Enumerated }}
type {{ $m.Name }} string

const (
{{- range $_, $v := $m.EnumeratedValues }}
    {{ $m.Name }}{{typename $v }} {{ $m.Name }} = {{ $v | quote }}
{{- end }}
)

var valid{{$m.Name}} = map[string]struct{}{
{{- range $_, $v := $m.EnumeratedValues }}
    {{ $v | quote }}: struct{}{},
{{- end }}
}

func (s {{$m.Name}}) OK() error {
    _, ok := valid{{$m.Name}}[string(s)]
    if !ok {
        return &enumInvalidValueError{value: string(s)}
    }
    return nil
}

{{ else }}
type {{ $m.Name }} struct {
{{- range $m.Fields }}
	{{ .Name }} {{ if and (not .Required) (not .NoPointer) }}*{{ end }}{{ .Type }} {{ if .StructTag }}`json:"{{ if .DoNotSerialize }}-{{ else }}{{ .StructTag }}{{ if not .Required }},omitempty{{ end }}{{end}}"`{{ end }}
{{- end }}
}
{{ end }}
{{ end }}

{{ range .Handlers }}
{{- if .Params.HasParams }}
func get{{ typename .Name }}Params(r *http.Request) ({{typename .Name}}Params, error) {
	var p {{typename .Name}}Params

{{ range $_, $v := .Params }}
{{ if eq $v.Location "query" }}
	{ // {{ $v.Name }}
{{ if $v.Enumerated }}
        validValues := map[string]struct{}{
{{- range $v.EnumeratedValues }}
        {{ . | quote }}: struct{}{},
{{- end}}
        }
{{ end }}
		val, err := params.QueryParam{{ title $v.Type }}(
            r.URL.Query(),
            `{{ $v.Name }}`,
            params.Required({{ $v.Required }}),
{{- if $v.Enumerated }}
            params.EnumeratedValues(validValues),
{{ end }}
        )
		if err != nil {
			// TODO: need to continue processing other fields instead of aborting here.
			return p, err
		}
		p.{{ typename $v.Name }} = {{ if $v.Required}}*{{ end}}val
	}
{{ end }}
{{ if eq $v.Location "header" }}
    { // {{ $v.Name }}
{{ if $v.Enumerated }}
        validValues := map[string]struct{}{
{{- range $v.EnumeratedValues }}
        {{ . | quote }}: struct{}{},
{{- end}}
        }
{{ end }}
        val, err := params.HeaderParam{{ title $v.Type }}(
            r.Header,
            `{{ $v.Name }}`,
            params.Required({{ $v.Required }}),
{{- if $v.Enumerated }}
            params.EnumeratedValues(validValues),
{{ end }}
        )
        if err != nil {
            // TODO: need to continue processing other fields instead of aborting here.
            return p, err
        }
        p.{{ typename $v.Name }} = {{ if $v.Required}}*{{ end}}val
    }
{{ end }}
{{ end }}
	return p, nil
}

{{- if .Params.HasQueryParams }}

func(p {{ typename .Name }}Params) get() []string {
    var data []string

{{ range $_, $v := .Params }}
{{ if eq $v.Location "query" }}
    {{ if $v.Required }}
        data = append(data, "{{ $v.Name }}", {{ $v.FormattingFunc }})
    {{ else }}
        if p.{{ typename $v.Name }} != nil {
            data = append(data, "{{ $v.Name }}", {{ $v.FormattingFunc }})
        }
    {{ end }}
{{ end }}
{{ end }}

    return data
}

{{ end }}

{{- if .Params.HasHeaderParams }}

func(p {{ typename .Name }}Params) getHeaders() []string {
    var data []string

{{ range $_, $v := .Params }}
{{ if eq $v.Location "header" }}
    {{ if $v.Required }}
        data = append(data, "{{ $v.Name }}", {{ $v.FormattingFunc }})
    {{ else }}
        if p.{{ typename $v.Name }} != nil {
            data = append(data, "{{ $v.Name }}", {{ $v.FormattingFunc }})
        }
    {{ end }}
{{ end }}
{{ end }}

    return data
}
{{ end }}
{{ end }}
{{ end }}


{{ if .Models.HasEnumerated }}
type enumInvalidValueError struct {
    value string
}

func (e *enumInvalidValueError) Error() string {
    return fmt.Sprintf("%q is not a valid enumerated value", e.value)
}

func (e *enumInvalidValueError) StatusCode() int {
    return  http.StatusUnprocessableEntity
}
{{ end }}
