// Code generated by {{.GeneratorInfo.Name }}. DO NOT EDIT.
// {{ .GeneratorInfo.Name }} {{ .GeneratorInfo.Version }}

package {{ .PackageName }}

{{ if .Models.Imports }}
{{ if eq (len .Models.Imports) 1 }}
import {{ (index .Models.Imports 0).String }}
{{ else }}
import (
{{- range .Models.Imports }}
	"{{ .String }}"
{{- end }}
)
{{ end }}
{{ end }}
import "github.com/jasonhancock/jasongen/params"

{{ range .Models }}
// {{ .Name }} {{ .Description }}
type {{ .Name }} struct {
{{- range .Fields }}
	{{ .Name }} {{ if and (not .Required) (not .NoPointer) }}*{{ end }}{{ .Type }} {{ if .StructTag }}`json:"{{ if .DoNotSerialize }}-{{ else }}{{ .StructTag }}{{ if not .Required }},omitempty{{ end }}{{end}}"`{{ end }}
{{- end }}
}
{{ end }}

{{ range .Handlers }}
{{- if .Params.HasParams }}
func get{{ typename .Name }}Params(r *http.Request) ({{typename .Name}}Params, error) {
	var p {{typename .Name}}Params

{{ range $_, $v := .Params }}
{{ if eq $v.Location "query" }}
	{ // {{ $v.Name }}
		val, err := params.QueryParam{{ title $v.Type }}(r.URL.Values, `{{ $v.Name }}`, params.Required({{ $v.Required }}))
		if err != nil {
			// TODO: need to continue processing other fields instead of aborting here.
			return p, err
		}
		p.{{ typename $v.Name }} = {{ if $v.Required}}*{{ end}}val
	}
{{ end }}
{{ if eq $v.Location "header" }}
    { // {{ $v.Name }}
        val, err := params.HeaderParam{{ title $v.Type }}(r.Header, `{{ $v.Name }}`, params.Required({{ $v.Required }}))
        if err != nil {
            // TODO: need to continue processing other fields instead of aborting here.
            return p, err
        }
        p.{{ typename $v.Name }} = {{ if $v.Required}}*{{ end}}val
    }
{{ end }}
{{ end }}
	return p, nil
}

{{- if .Params.HasQueryParams }}

func(p {{ typename .Name }}Params) get() []string {
    var data []string

{{ range $_, $v := .Params }}
{{ if eq $v.Location "query" }}
    {{ if $v.Required }}
        data = append(data, "{{ $v.Name }}", {{ $v.FormattingFunc }})
    {{ else }}
        if p.{{ typename $v.Name }} != nil {
            data = append(data, "{{ $v.Name }}", {{ $v.FormattingFunc }})
        }
    {{ end }}
{{ end }}
{{ end }}

    return data
}

{{ end }}

{{- if .Params.HasHeaderParams }}

func(p {{ typename .Name }}Params) getHeaders() []string {
    var data []string

{{ range $_, $v := .Params }}
{{ if eq $v.Location "header" }}
    {{ if $v.Required }}
        data = append(data, "{{ $v.Name }}", {{ $v.FormattingFunc }})
    {{ else }}
        if p.{{ typename $v.Name }} != nil {
            data = append(data, "{{ $v.Name }}", {{ $v.FormattingFunc }})
        }
    {{ end }}
{{ end }}
{{ end }}

    return data
}
{{ end }}
{{ end }}
{{ end }}
