// Code generated by template.test. DO NOT EDIT.
// template.test 1.2.3

package widgets

import (
	"context"
	"net/http"

	"github.com/go-chi/chi/v5"
)

// Responder is responsible for sending requests to the client.
type Responder interface {
	With(w http.ResponseWriter, req *http.Request, status int, data any)
	Err(w http.ResponseWriter, req *http.Request, err error)
}

// SVC is the interface required of the service.
type SVC interface {
	WidgetsList(ctx context.Context, param2 string, qp WidgetsListParams) error
	SVCCustomizations
}

// HTTPServer is the transport layer for the service.
type HTTPServer struct {
	svc     SVC
	router  chi.Router
	respond Responder
}

// NewHTTPServer constructs a new HTTPServer.
func NewHTTPServer(svc SVC, r Responder, rt chi.Router) *HTTPServer {
	s := &HTTPServer{
		svc:     svc,
		respond: r,
		router:  rt,
	}

	s.router.Get(`/v1/widgets`, s.widgetsList)

	return s
}

// ServeHTTP fulfills the http.Handler interface.
func (s *HTTPServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	s.router.ServeHTTP(w, r)
}

func (s *HTTPServer) widgetsList(w http.ResponseWriter, r *http.Request) {
	param2 := chi.URLParam(r, `param2`)

	qp, err := getWidgetsListParams(r)
	if err != nil {
		s.respond.Err(w, r, err)
		return
	}
	err := s.svc.WidgetsList(r.Context(), param2, qp)
	if err != nil {
		s.respond.Err(w, r, err)
		return
	}
	s.respond.With(w, r, http.StatusNoContent, nil)
}
