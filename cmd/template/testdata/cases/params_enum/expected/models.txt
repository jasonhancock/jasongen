// Code generated by template.test. DO NOT EDIT.
// template.test 1.2.3

package widgets

import (
	"net/http"

	"github.com/jasonhancock/jasongen/params"
)

// WidgetsListParams Parameters for WidgetsList
type WidgetsListParams struct {
	Param1 *string
	Param3 string
}

func getWidgetsListParams(r *http.Request) (WidgetsListParams, error) {
	var p WidgetsListParams

	{ // param1

		validValues := map[string]struct{}{
			"value1": struct{}{},
			"value2": struct{}{},
			"value3": struct{}{},
		}

		val, err := params.QueryParamString(
			r.URL.Values,
			`param1`,
			params.Required(false),
			params.EnumeratedValues(validValues),
		)
		if err != nil {
			// TODO: need to continue processing other fields instead of aborting here.
			return p, err
		}
		p.Param1 = val
	}

	{ // param3

		validValues := map[string]struct{}{
			"value7": struct{}{},
			"value8": struct{}{},
			"value9": struct{}{},
		}

		val, err := params.HeaderParamString(
			r.Header,
			`param3`,
			params.Required(true),
			params.EnumeratedValues(validValues),
		)
		if err != nil {
			// TODO: need to continue processing other fields instead of aborting here.
			return p, err
		}
		p.Param3 = *val
	}

	return p, nil
}

func (p WidgetsListParams) get() []string {
	var data []string

	if p.Param1 != nil {
		data = append(data, "param1", *p.Param1)
	}

	return data
}

func (p WidgetsListParams) getHeaders() []string {
	var data []string

	data = append(data, "param3", p.Param3)

	return data
}
