tags:
  - name: widgets
    description: Widget related endpoints
paths:
  /metrics:
    get:
      tags:
        - metrics
      summary: Prometheus metrics endpoint
      description: Returns application metrics in a format Prometheus can scrape
      operationId: metrics
      responses:
        '200':
          description: successful operation
          content:
            text/plain: {}
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: internal server error
        "502":
          description: bad gateway
        "503":
          description: service unavailable
        "504":
          description: gateway timeout
  /v1/widgets:
    get:
      tags:
        - widgets
      summary: Get a list of all widgets.
      description: Gets a list of all widgets
      operationId: widgetsList
      parameters:
        - name: qp1
          in: query
          required: true
          description: A query parameter.
          schema:
            type: string
        - name: qp2
          in: query
          required: false
          description: A query parameter.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WidgetsListResponse'
    post:
      tags:
        - widgets
      summary: Create a widget
      operationId: widgetCreate
      security:
        - MyAuth: ['some_scope']
      requestBody:
        description: Widget information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WidgetCreateRequest'
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Widget'
        '400':
          description: bad request
        '401':
          description: not authorized
        '403':
          description: forbidden
        '422':
          description: unprocessable entity
  '/v1/widgets/{id}/{num}':
    get:
      tags:
        - widgets
      summary: Get a specific widget by ID.
      description: Get a specific widget by ID.
      operationId: widgetGet
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the widget.
          schema:
            type: string
        - name: num
          in: path
          required: true
          description: An integer in the path.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Widget'
        '404':
          description: not found
        '422':
          description: unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/widgets/{id}':
    delete:
      tags:
        - widgets
      summary: Delete a specific widget by ID.
      description: Delete a specific widget by ID.
      operationId: widgetDelete
      security:
        - MyAuth: ['some_other_scope']
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the widget.
          schema:
            type: string
      responses:
        '204':
          description: successful operation
  /v1/widgets/{id}/download:
    get:
      tags:
        - widgets
      summary: Download a file.
      description: Downloads a file.
      operationId: widgetDownload
      parameters:
        - name: id
          in: path
          required: true
          description: A path parameter.
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /v1/widgets/teststar/*:
    get:
      tags:
        - widgets
      summary: Get a list of widgets.
      description: Gets a list of widgets
      operationId: widgetsListStar
      parameters:
        - name: qp1
          in: path
          required: true
          description: A wildcard path parameter.
          x-retrieval-name: "*"
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WidgetsListResponse'
components:
  schemas:
    WidgetCreateRequest:
      required:
        - myint32
        - myint64
        - myint_unspecified
        - name
        - my_suppress_serialization
      type: object
      properties:
        name:
          type: string
          description: "The widget's name"
          example: "Sparkly Fork"
        myint32:
          type: integer
          format: int32
          description: An integer value
        myint64:
          type: integer
          format: int64
          description: An integer value
        myint_unspecified:
          type: integer
          description: An integer value
        mynumber32:
          type: number
          format: float
          description: An float value
        mynumber64:
          type: number
          format: double
          description: An float value
        mybool:
          type: boolean
          description: A bool value
        my_suppress_serialization:
          type: string
          description: "something that should be suppressed"
          x-go-do-not-serialize: true
    WidgetsListResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Widget'
    Widget:
      type: object
      required:
        - id
        - myint
        - name
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: The ID of the widget.
          example: abc123
        myint:
          type: integer
          format: int32
          description: An integer value
        name:
          type: string
          description: The widget's name
          example: Sparkly Fork
        created_at:
          type: string
          description: The timestamp of the when the widget was created in RFC3339 format.
          example: "2023-11-13T10:09:17.908177-08:00"
          x-go-type: "time.Time"
          x-go-import: "time"
        updated_at:
          type: string
          description: The timestamp of the when the widget was last updated in RFC3339 format.
          example: "2023-11-13T10:09:17.908177-08:00"
          x-go-type: "time.Time"
          x-go-import: "time"
    ErrorResponse:
      type: object
      required:
        - request_id
        - error
      properties:
        request_id:
          type: string
          description: The request's ID.
          example: b11a92cc-d596-436f-bcfc-c315a0516fb5
        error:
          $ref: '#/components/schemas/ErrorData'
      x-go-property-names:
        error: error_data
    ErrorData:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: An error message.
          example: Some error message.
    AddPropString:
      required:
        - labels
      type: object
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
    AddPropAny:
      required:
        - labels
      type: object
      properties:
        labels:
          type: object
          additionalProperties: true
    ArrayGoType:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            type: string
            x-go-import: time
            x-go-type: time.Time
