// Code generated by template.test. DO NOT EDIT.
// template.test 1.2.3

package widgets

import (
	"fmt"
	"net/http"
	"time"

	"github.com/jasonhancock/jasongen/params"
)

// AddPropAny
type AddPropAny struct {
	Labels map[string]any `json:"labels"`
}

// AddPropString
type AddPropString struct {
	Labels map[string]string `json:"labels"`
}

// ArrayGoType
type ArrayGoType struct {
	Items []time.Time `json:"items"`
}

// ErrorData
type ErrorData struct {
	Message string `json:"message"`
}

// ErrorResponse
type ErrorResponse struct {
	ErrorData ErrorData `json:"error"`
	RequestID string    `json:"request_id"`
}

// Widget
type Widget struct {
	ID        string    `json:"id"`
	Myint     int32     `json:"myint"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// WidgetCreateRequest
type WidgetCreateRequest struct {
	MySuppressSerialization string   `json:"-"`
	Mybool                  *bool    `json:"mybool,omitempty"`
	Myint32                 int32    `json:"myint32"`
	Myint64                 int64    `json:"myint64"`
	MyintUnspecified        int64    `json:"myint_unspecified"`
	Mynumber32              *float32 `json:"mynumber32,omitempty"`
	Mynumber64              *float64 `json:"mynumber64,omitempty"`
	Name                    string   `json:"name"`
}

// WidgetsListParams Parameters for WidgetsList
type WidgetsListParams struct {
	Qp1 string
	Qp2 *int32
}

// WidgetsListResponse
type WidgetsListResponse struct {
	Items []Widget `json:"items"`
}

func getWidgetsListParams(r *http.Request) (WidgetsListParams, error) {
	var p WidgetsListParams

	{ // qp1

		val, err := params.QueryParamString(
			r.URL.Query(),
			`qp1`,
			params.Required(true),
		)
		if err != nil {
			// TODO: need to continue processing other fields instead of aborting here.
			return p, err
		}
		p.Qp1 = *val
	}

	{ // qp2

		val, err := params.QueryParamInt32(
			r.URL.Query(),
			`qp2`,
			params.Required(false),
		)
		if err != nil {
			// TODO: need to continue processing other fields instead of aborting here.
			return p, err
		}
		p.Qp2 = val
	}

	return p, nil
}

func (p WidgetsListParams) get() []string {
	var data []string

	data = append(data, "qp1", p.Qp1)

	if p.Qp2 != nil {
		data = append(data, "qp2", fmt.Sprintf("%d", *p.Qp2))
	}

	return data
}
