// Code generated by template.test. DO NOT EDIT.
// template.test 1.2.3

package widgets

import (
	"context"
	"net/http"
	"time"

	"github.com/prometheus/client_golang/prometheus"
)

// MetricsClient wraps a Client and will record metrics around request duration.
type MetricsClient struct {
	client Iface
	metric *prometheus.HistogramVec
}

// NewMetricsClient initializes a MetricsClient.
func NewMetricsClient(client Iface, metric *prometheus.HistogramVec) *MetricsClient {
	return &MetricsClient{
		client: client,
		metric: metric,
	}
}

// Metrics Returns application metrics in a format Prometheus can scrape
func (c *MetricsClient) Metrics(ctx context.Context) ([]byte, error) {
	start := time.Now()
	resp, err := c.client.Metrics(ctx)
	c.metric.WithLabelValues("metrics").Observe(time.Since(start).Seconds())
	return resp, err
}

// WidgetCreate
func (c *MetricsClient) WidgetCreate(ctx context.Context, req models.WidgetCreateRequest) (Widget, error) {
	start := time.Now()
	resp, err := c.client.WidgetCreate(ctx, req)
	c.metric.WithLabelValues("widget_create").Observe(time.Since(start).Seconds())
	return resp, err
}

// WidgetDelete Delete a specific widget by ID.
func (c *MetricsClient) WidgetDelete(ctx context.Context, id string) error {
	start := time.Now()
	err := c.client.WidgetDelete(ctx, id)
	c.metric.WithLabelValues("widget_delete").Observe(time.Since(start).Seconds())
	return err
}

// WidgetDownload Downloads a file.
func (c *MetricsClient) WidgetDownload(ctx context.Context, id string) (*http.Response, error) {
	start := time.Now()
	resp, err := c.client.WidgetDownload(ctx, id)
	c.metric.WithLabelValues("widget_download").Observe(time.Since(start).Seconds())
	return resp, err
}

// WidgetGet Get a specific widget by ID. This is a really, really, really long comment to test out the
// wrapping of comments on descriptions.
func (c *MetricsClient) WidgetGet(ctx context.Context, id string, num int64) (Widget, error) {
	start := time.Now()
	resp, err := c.client.WidgetGet(ctx, id, num)
	c.metric.WithLabelValues("widget_get").Observe(time.Since(start).Seconds())
	return resp, err
}

// WidgetsList Gets a list of all widgets
func (c *MetricsClient) WidgetsList(ctx context.Context, qp WidgetsListParams) (WidgetsListResponse, error) {
	start := time.Now()
	resp, err := c.client.WidgetsList(ctx, qp)
	c.metric.WithLabelValues("widgets_list").Observe(time.Since(start).Seconds())
	return resp, err
}

// WidgetsListStar Gets a list of widgets
func (c *MetricsClient) WidgetsListStar(ctx context.Context, qp1 string) (WidgetsListResponse, error) {
	start := time.Now()
	resp, err := c.client.WidgetsListStar(ctx, qp1)
	c.metric.WithLabelValues("widgets_list_star").Observe(time.Since(start).Seconds())
	return resp, err
}
