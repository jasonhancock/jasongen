// Code generated by template.test. DO NOT EDIT.
// template.test 1.2.3

package widgets

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-chi/chi/v5"
	"github.com/justinas/alice"
	"github.com/netSkopePlatformEng/polaris-usersync/pkg/api"
)

// Responder is responsible for sending requests to the client.
type Responder interface {
	With(w http.ResponseWriter, req *http.Request, status int, data any)
	Err(w http.ResponseWriter, req *http.Request, err error)
}

// SVC is the interface required of the service.
type SVC interface {
	WidgetCreate(ctx context.Context, req WidgetCreateRequest) (Widget, error)
	WidgetDelete(ctx context.Context, id string) error
	WidgetGet(ctx context.Context, id string, num int64) (Widget, error)
	WidgetsList(ctx context.Context) (WidgetsListResponse, error)
}

type MyAuth interface {
	Authorized(arg1 string) func(next http.Handler) http.Handler
}

// HTTPServer is the transport layer for the service.
type HTTPServer struct {
	svc     SVC
	router  chi.Router
	respond Responder
}

// NewHTTPServer constructs a new HTTPServer.
func NewHTTPServer(svc SVC, r Responder, rt chi.Router, myAuth MyAuth) *HTTPServer {
	s := &HTTPServer{
		svc:     svc,
		respond: r,
		router:  rt,
	}

	myAuthAuthzPerm0 := alice.New()
	myAuthAuthzPerm1 := alice.New()
	if myAuth != nil {
		myAuthAuthzPerm0.Append(myAuth.Authorized("some_other_scope"))
		myAuthAuthzPerm1.Append(myAuth.Authorized("some_scope"))
	}

	s.router.Get(`/v1/widgets`, s.widgetsList)
	s.router.With(myAuthAuthzPerm1.Then).Post(`/v1/widgets`, s.widgetCreate)
	s.router.With(myAuthAuthzPerm0.Then).Delete(`/v1/widgets/{id}`, s.widgetDelete)
	s.router.Get(`/v1/widgets/{id}/{num}`, s.widgetGet)

	return s
}

// ServeHTTP fulfills the http.Handler interface.
func (s *HTTPServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	s.router.ServeHTTP(w, r)
}

func (s *HTTPServer) widgetCreate(w http.ResponseWriter, r *http.Request) {
	var req WidgetCreateRequest
	if err := api.Decode(r, &req); err != nil {
		s.respond.Err(w, r, err)
		return
	}

	resp, err := s.svc.WidgetCreate(r.Context(), req)
	if err != nil {
		s.respond.Err(w, r, err)
		return
	}

	s.respond.With(w, r, http.StatusCreated, resp)
}

func (s *HTTPServer) widgetDelete(w http.ResponseWriter, r *http.Request) {
	id := chi.URLParam(r, `id`)

	err := s.svc.WidgetDelete(r.Context(), id)
	if err != nil {
		s.respond.Err(w, r, err)
		return
	}

	s.respond.With(w, r, http.StatusNoContent, nil)
}

func (s *HTTPServer) widgetGet(w http.ResponseWriter, r *http.Request) {
	id := chi.URLParam(r, `id`)
	num, err := strconv.ParseInt(chi.URLParam(r, `num`), 10, 64)
	if err != nil {
		// TODO: this error handling could be better, but will suffice for now.
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	resp, err := s.svc.WidgetGet(r.Context(), id, num)
	if err != nil {
		s.respond.Err(w, r, err)
		return
	}

	s.respond.With(w, r, http.StatusOK, resp)
}

func (s *HTTPServer) widgetsList(w http.ResponseWriter, r *http.Request) {

	resp, err := s.svc.WidgetsList(r.Context())
	if err != nil {
		s.respond.Err(w, r, err)
		return
	}

	s.respond.With(w, r, http.StatusOK, resp)
}
