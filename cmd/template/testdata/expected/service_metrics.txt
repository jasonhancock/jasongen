// Code generated by template.test. DO NOT EDIT.
// template.test 1.2.3

package widgets

import (
	"context"

	"github.com/prometheus/client_golang/prometheus"
)

var _ SVC = (*MetricsService)(nil) // Verify that *MetricsService implements SVC.

type MetricsService struct {
	svc        SVC
	errCounter *prometheus.CounterVec
}

func NewMetricsService(svc SVC, errCounter *prometheus.CounterVec) *MetricsService {
	return &MetricsService{
		svc:        svc,
		errCounter: errCounter,
	}
}

// WidgetCreate
func (s *MetricsService) WidgetCreate(ctx context.Context, req WidgetCreateRequest) (Widget, error) {
	resp, err := s.svc.WidgetCreate(ctx, req)
	if err != nil {
		s.errCounter.WithLabelValues("widget_create").Inc()
	}
	return resp, err
}

// WidgetDelete delete a specific widget by ID.
func (s *MetricsService) WidgetDelete(ctx context.Context, id string) error {
	err := s.svc.WidgetDelete(ctx, id)
	if err != nil {
		s.errCounter.WithLabelValues("widget_delete").Inc()
	}
	return err
}

// WidgetDownload downloads a file.
func (s *MetricsService) WidgetDownload(ctx context.Context, id string) (*FileDownloadResponse, error) {
	resp, err := s.svc.WidgetDownload(ctx, id)
	if err != nil {
		s.errCounter.WithLabelValues("widget_download").Inc()
	}
	return resp, err
}

// WidgetGet get a specific widget by ID.
func (s *MetricsService) WidgetGet(ctx context.Context, id string, num int64) (Widget, error) {
	resp, err := s.svc.WidgetGet(ctx, id, num)
	if err != nil {
		s.errCounter.WithLabelValues("widget_get").Inc()
	}
	return resp, err
}

// WidgetsList gets a list of all widgets
func (s *MetricsService) WidgetsList(ctx context.Context, qp WidgetsListParams) (WidgetsListResponse, error) {
	resp, err := s.svc.WidgetsList(ctx, qp)
	if err != nil {
		s.errCounter.WithLabelValues("widgets_list").Inc()
	}
	return resp, err
}
