// Code generated by template.test. DO NOT EDIT.
// template.test 1.2.3

package widgets

import (
	"fmt"
	"net/url"
	"time"
)

// Widget
type Widget struct {
	ID        string    `json:"id"`
	Myint     int32     `json:"myint"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// WidgetCreateRequest
type WidgetCreateRequest struct {
	Mybool           *bool    `json:"mybool,omitempty"`
	Myint32          int32    `json:"myint32"`
	Myint64          int64    `json:"myint64"`
	MyintUnspecified int64    `json:"myint_unspecified"`
	Mynumber32       *float32 `json:"mynumber32,omitempty"`
	Mynumber64       *float64 `json:"mynumber64,omitempty"`
	Name             string   `json:"name"`
}

// WidgetsListParams Query parameters for WidgetsList
type WidgetsListParams struct {
	Qp1 string
	Qp2 *int32
}

// WidgetsListResponse
type WidgetsListResponse struct {
	Items []Widget `json:"items"`
}

func getWidgetsListParms(values url.Values) (WidgetsListParams, error) {
	var p WidgetsListParams

	{ // qp1
		err := StringQueryParam(values, `qp1`, p.qp1,
			Required(true),
		)
		if err != nil {
			// TODO: need to continue processing other fields instead of aborting here.
			return p, err
		}
	}

	{ // qp2
		err := StringQueryParam(values, `qp2`, &p.qp2,
			Required(false),
		)
		if err != nil {
			// TODO: need to continue processing other fields instead of aborting here.
			return p, err
		}
	}

	return p, nil
}

func (p WidgetsListParms) get() []string {
	var data string

	data = append(data, "qp1", p.Qp1)

	if p.Qp2 != nil {
		data = append(data, "qp2", fmt.Sprintf("%d", *p.Qp2))
	}

	return data
}
