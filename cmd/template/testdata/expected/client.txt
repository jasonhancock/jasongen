// Code generated by template.test. DO NOT EDIT.
// template.test 1.2.3

package widgets

import (
	"context"
	"fmt"
	"net/http"
	"net/url"

	"github.com/jasonhancock/go-backoff"
	"github.com/ns-jsattler/go-httpc"
)

var nonRetryStatuses = httpc.StatusNotIn(
	http.StatusUnauthorized,
	http.StatusForbidden,
	http.StatusUnprocessableEntity,
	http.StatusBadRequest,
)

type Client struct {
	client *httpc.Client
}

// New creates a new client that will communicate with the server over HTTP.
func New(host url.URL, client httpc.Doer, b backoff.Backoffer) *Client {
	return &Client{
		client: httpc.New(
			client,
			httpc.WithBaseURL(host.String()),
			httpc.WithBackoff(b),
			httpc.WithRetryResponseErrors(),
		),
	}
}

// WidgetCreate
func (c *Client) WidgetCreate(ctx context.Context, req WidgetCreateRequest) (Widget, error) {
	var data Widget
	err := c.client.POST("/v1/widgets").
		ContentType("application/json").
		Body(req).
		Success(httpc.StatusIn(http.StatusCreated)).
		RetryStatus(nonRetryStatuses).
		DecodeJSON(&data).
		Header("Accept", "application/json").
		Do(ctx)

	return data, err
}

// WidgetDelete Delete a specific widget by ID.
func (c *Client) WidgetDelete(ctx context.Context, id string) error {
	err := c.client.DELETE(fmt.Sprintf("/v1/widgets/%s", id)).
		Success(httpc.StatusIn(http.StatusNoContent)).
		RetryStatus(nonRetryStatuses).
		Do(ctx)

	return err
}

// WidgetGet Get a specific widget by ID.
func (c *Client) WidgetGet(ctx context.Context, id string) (Widget, error) {
	var data Widget
	err := c.client.GET(fmt.Sprintf("/v1/widgets/%s", id)).
		Success(httpc.StatusIn(http.StatusOK)).
		RetryStatus(nonRetryStatuses).
		DecodeJSON(&data).
		Header("Accept", "application/json").
		Do(ctx)

	return data, err
}

// WidgetsList Gets a list of all widgets
func (c *Client) WidgetsList(ctx context.Context) (WidgetsListResponse, error) {
	var data WidgetsListResponse
	err := c.client.GET("/v1/widgets").
		Success(httpc.StatusIn(http.StatusOK)).
		RetryStatus(nonRetryStatuses).
		DecodeJSON(&data).
		Header("Accept", "application/json").
		Do(ctx)

	return data, err
}
